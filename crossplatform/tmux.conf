# powerline
run-shell "powerline-daemon -q"
source "/usr/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf"

# Use Ctl-A as the prefix because I used to screen
unbind C-b
set -g prefix `
bind ` send-prefix

bind-key L last-window

#set -g default-terminal "screen-256color"

#set -g default-command "reattach-to-user-namespace -l bash"

# Start numbering at 1
set -g base-index 1

# Make mouse useful in copy mode
setw -g mode-mouse on
#
# Allow mouse to select which pane to use
set -g mouse-select-pane on
#
#
# # Scroll History
set -g history-limit 30000
#
# # Set ability to capture on start and restore on exit window data when running an application
setw -g alternate-screen on
#
# Basically allows for faster key repetition
set -s escape-time 0

# Set status bar
set -g status-justify centre
set -g status-bg black
set -g status-fg white
set-option -g status-interval 5
set -g status-right-length 150
set -g status-left-length 25
set -g status-left "#[fg=blue]#h"
set -g status-right "#[fg=blue] %m-%d-%Y %H:%M"

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use '<prefix>-a' <command> to send commands to a TMUX session inside 
# another TMUX session
bind-key a send-prefix

# Highlight active window
set-window-option -g window-status-current-bg red

# Reload tmux config
unbind r
bind r source-file ~/.tmux.conf \; display "Configuration Reloaded!"

# Turn on vi bindings in copy mode
set-option -g status-keys vi
set-window-option -g mode-keys vi

# Setup 'v' to begin selection as in Vim
# use esc like vim
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key P run "xclip -o | tmux load-buffer - ; tmux paste-buffer"
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-selection
#

# Move around panes vim style
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# Smart pane switching with awareness of vim splits
# http://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits

bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

bind-key M-7 resize-pane -t 1 -x 90
bind-key M-8 resize-pane -t 1 -x 60
bind-key M-9 resize-pane -t 1 -x 30
bind-key M-0 resize-pane -t 0 -x 30

bind | split-window -h -c "#{pane_current_path}"
bind - split-window -c "#{pane_current_path}"
#bind c new-window -c "#{pane_current_path}"
bind c new-window -c ~
